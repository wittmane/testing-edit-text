<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="Theme">
        <!-- (EW) android:textEditSuggestionContainerLayout is private, so we have to copy it
             here-->
        <!-- Layout of the container of the suggestion popup window. -->
        <attr name="textEditSuggestionContainerLayout" format="reference" />
        <!-- (EW) android:textEditSuggestionHighlightStyle is private, so we have to copy it here-->
        <!-- Text appearance of the focused words to be replaced by suggested word. -->
        <attr name="textEditSuggestionHighlightStyle" format="reference" />

        <!-- (EW) android:floatingToolbarPopupBackgroundDrawable is private, so we have to copy it
             here-->
        <attr name="floatingToolbarPopupBackgroundDrawable" format="reference" />

        <!-- (EW) android:isLightTheme was added in version 23 (M), but it wasn't made public until
             version 29 (Q), so we have to copy it to use on versions prior to Q.-->
        <!-- Specifies that a theme has a light background with dark text on top. -->
        <attr name="isLightTheme" format="boolean" />

        <!-- Text color, typeface, size, and style for "large" text. Defaults to primary text color. -->
        <attr name="android:textAppearanceLarge" />
    </declare-styleable>
    <declare-styleable name="CustomSimpleTextView2">
        <attr name="android:text" />
<!--        <attr name="android:layout_width" />-->
<!--        <attr name="android:layout_height" />-->
        <attr name="android:inputType" />
        <attr name="android:gravity" />
        <attr name="android:hint" />
<!--        <attr name="android:textColor" />-->
        <!-- Reference to a drawable that will be drawn under the insertion cursor. -->
        <attr name="android:textCursorDrawable" />

        <attr name="android:textSelectHandleLeft" />
        <attr name="android:textSelectHandleRight" />
        <attr name="android:textSelectHandle" />
    </declare-styleable>
<!--    &lt;!&ndash; Reference to a drawable that will be drawn under the insertion cursor. &ndash;&gt;-->
<!--    <attr name="textCursorDrawable" format="reference" />-->

    <declare-styleable name="TextAppearance">
        <!-- Text color. -->
        <attr name="android:textColor" />
        <!-- Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). -->
        <attr name="android:textSize" />
        <!-- Style (normal, bold, italic, bold|italic) for the text. -->
        <attr name="android:textStyle" />
        <!-- Weight for the font used in the TextView. -->
        <attr name="android:textFontWeight" />
        <!-- Typeface (normal, sans, serif, monospace) for the text. -->
        <attr name="android:typeface" />
        <!-- Font family (named by string or as a font resource reference) for the text. -->
        <attr name="android:fontFamily" />
        <!-- Specifies the {@link android.os.LocaleList} for the text.
             May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
             When not specified or an empty string is given, it will fallback to the default one.
             {@see android.os.LocaleList#forLanguageTags(String)} -->
        <!-- TODO: add back when changing the target API (only supported since 29) or just delete if it isn't necessary -->
<!--        <attr name="android:textLocale" />-->
        <!-- Color of the text selection highlight. -->
        <attr name="android:textColorHighlight" />
        <!-- Color of the hint text. -->
        <attr name="android:textColorHint" />
        <!-- Color of the links. -->
        <attr name="android:textColorLink" />
        <!-- Present the text in ALL CAPS. This may use a small-caps form when available. -->
        <attr name="android:textAllCaps" />
        <!-- Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. -->
        <attr name="android:shadowColor" />
        <!-- Horizontal offset of the text shadow. -->
        <attr name="android:shadowDx" />
        <!-- Vertical offset of the text shadow. -->
        <attr name="android:shadowDy" />
        <!-- Blur radius of the text shadow. -->
        <attr name="android:shadowRadius" />
        <!-- Elegant text height, especially for less compacted complex script text. -->
        <attr name="android:elegantTextHeight" />
        <!-- Whether to respect the ascent and descent of the fallback fonts that are used in
        displaying the text. When true, fallback fonts that end up getting used can increase
        the ascent and descent of the lines that they are used on. -->
        <attr name="android:fallbackLineSpacing" />
        <!-- Text letter-spacing. -->
        <attr name="android:letterSpacing" />
        <!-- Font feature settings. -->
        <attr name="android:fontFeatureSettings" />
        <!-- Font variation settings. -->
        <attr name="android:fontVariationSettings" />
    </declare-styleable>
    <declare-styleable name="EditText">
        <!-- Determines the minimum type that getText() will return.
             The default is "normal".
             Note that EditText and LogTextBox always return Editable,
             even if you specify something less powerful here. -->
        <attr name="android:bufferType" />
        <!-- Text to display. -->
        <attr name="android:text" />
        <!-- Hint text to display when the text is empty. -->
        <attr name="android:hint" />
        <!-- Text color. -->
        <attr name="android:textColor" />
        <!-- Color of the text selection highlight. -->
        <attr name="android:textColorHighlight" />
        <!-- Color of the hint text. -->
        <attr name="android:textColorHint" />
        <!-- Base text color, typeface, size, and style. -->
        <attr name="android:textAppearance" />
        <!-- Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). -->
        <attr name="android:textSize" />
        <!-- Sets the horizontal scaling factor for the text. -->
        <attr name="android:textScaleX" />
        <!-- Typeface (normal, sans, serif, monospace) for the text. -->
        <attr name="android:typeface" />
        <!-- Style (normal, bold, italic, bold|italic) for the text. -->
        <attr name="android:textStyle" />
        <!-- Weight for the font used in the TextView. -->
        <attr name="android:textFontWeight" />
        <!-- Font family (named by string or as a font resource reference) for the text. -->
        <attr name="android:fontFamily" />
        <!-- Specifies the {@link android.os.LocaleList} for the text in this TextView.
             If not given, the system default will be used.
             May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
             When not specified or an empty string is given, it will fallback to the default one.
             {@see android.os.LocaleList#forLanguageTags(String)}
             {@see android.widget.TextView#setTextLocales(android.os.LocaleList)} -->
        <!-- TODO: add back when changing the target API (only supported since 29) or just delete if it isn't necessary -->
<!--        <attr name="android:textLocale" />-->
        <!-- Text color for links. -->
        <attr name="android:textColorLink" />
        <!-- Makes the cursor visible (the default) or invisible. -->
        <attr name="android:cursorVisible" />
        <!-- Makes the TextView be at most this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply. -->
        <attr name="android:maxLines" />
        <!-- Makes the TextView be at most this many pixels tall. -->
        <attr name="android:maxHeight" />
        <!-- Makes the TextView be exactly this many lines tall. -->
        <attr name="android:lines" />
        <!-- Makes the TextView be exactly this tall.
             You could get the same effect by specifying this number in the
             layout parameters. -->
        <attr name="android:height" />
        <!-- Makes the TextView be at least this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the minLines attribute to apply. -->
        <attr name="android:minLines" />
        <!-- Makes the TextView be at least this many pixels tall. -->
        <attr name="android:minHeight" />
        <!-- Makes the TextView be at most this many ems wide. -->
        <attr name="android:maxEms" />
        <!-- Makes the TextView be at most this many pixels wide. -->
        <attr name="android:maxWidth" />
        <!-- Makes the TextView be exactly this many ems wide. -->
        <attr name="android:ems" />
        <!-- Makes the TextView be exactly this wide.
             You could get the same effect by specifying this number in the
             layout parameters. -->
        <attr name="android:width" />
        <!-- Makes the TextView be at least this many ems wide. -->
        <attr name="android:minEms" />
        <!-- Makes the TextView be at least this many pixels wide. -->
        <attr name="android:minWidth" />
        <!-- Specifies how to align the text by the view's x- and/or y-axis
             when the text is smaller than the view. -->
        <attr name="android:gravity" />
        <!-- Whether the text is allowed to be wider than the view (and
             therefore can be scrolled horizontally). -->
        <attr name="android:scrollHorizontally" />
        <!-- Whether the characters of the field are displayed as
             password dots instead of themselves.
             {@deprecated Use inputType instead.} -->
        <attr name="android:password" />
        <!-- Constrains the text to a single horizontally scrolling line
             instead of letting it wrap onto multiple lines, and advances
             focus instead of inserting a newline when you press the
             enter key.

             The default value is false (multi-line wrapped text mode) for non-editable text, but if
             you specify any value for inputType, the default is true (single-line input field mode).

             {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
             the layout of a static text, and use the <code>textMultiLine</code> flag in the
             inputType attribute instead for editable text views (if both singleLine and inputType
             are supplied, the inputType flags will override the value of singleLine). } -->
        <attr name="android:singleLine" />
        <!-- Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
             For example, a non-enabled EditText prevents the user from editing the contained text, and
             a non-enabled Button prevents the user from tapping the button.
             The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
             from evaluating state_enabled differ. -->
        <attr name="android:enabled" />
        <!-- If the text is selectable, select it all when the view takes
             focus. -->
        <attr name="android:selectAllOnFocus" />
        <!-- Leave enough room for ascenders and descenders instead of
             using the font ascent and descent strictly.  (Normally true). -->
        <attr name="android:includeFontPadding" />
        <!-- Set an input filter to constrain the text length to the
             specified number. -->
        <attr name="android:maxLength" />
        <!-- Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. -->
        <attr name="android:shadowColor" />
        <!-- Horizontal offset of the text shadow. -->
        <attr name="android:shadowDx" />
        <!-- Vertical offset of the text shadow. -->
        <attr name="android:shadowDy" />
        <!-- Blur radius of the text shadow. -->
        <attr name="android:shadowRadius" />
        <attr name="android:autoLink" />
        <!-- If set to false, keeps the movement method from being set
             to the link movement method even if autoLink causes links
             to be found. -->
        <attr name="android:linksClickable" />
        <!-- If set, specifies that this TextView has a numeric input method.
             The default is false.
             {@deprecated Use inputType instead.} -->
        <attr name="android:numeric" />
        <!-- If set, specifies that this TextView has a numeric input method
             and that these specific characters are the ones that it will
             accept.
             If this is set, numeric is implied to be true.
             The default is false. -->
        <attr name="android:digits" />
        <!-- If set, specifies that this TextView has a phone number input
             method. The default is false.
             {@deprecated Use inputType instead.} -->
        <attr name="android:phoneNumber" />
        <!-- If set, specifies that this TextView should use the specified
             input method (specified by fully-qualified class name).
             {@deprecated Use inputType instead.} -->
        <attr name="android:inputMethod" />
        <!-- If set, specifies that this TextView has a textual input method
             and should automatically capitalize what the user types.
             The default is "none".
             {@deprecated Use inputType instead.} -->
        <attr name="android:capitalize" />
        <!-- If set, specifies that this TextView has a textual input method
             and automatically corrects some common spelling errors.
             The default is "false".
             {@deprecated Use inputType instead.} -->
        <attr name="android:autoText" />
        <!-- If set, specifies that this TextView has an input method.
             It will be a textual one unless it has otherwise been specified.
             For TextView, this is false by default.  For EditText, it is
             true by default.
             {@deprecated Use inputType instead.} -->
        <attr name="android:editable" />
        <!-- If set, the text view will include its current complete text
             inside of its frozen icicle in addition to meta-data such as
             the current cursor position.  By default this is disabled;
             it can be useful when the contents of a text view is not stored
             in a persistent place such as a content provider. For
             {@link android.widget.EditText} it is always enabled, regardless
             of the value of the attribute. -->
        <attr name="android:freezesText" />
        <!-- If set, causes words that are longer than the view is wide
             to be ellipsized instead of broken in the middle.
             You will often also want to set scrollHorizontally or singleLine
             as well so that the text as a whole is also constrained to
             a single line instead of still allowed to be broken onto
             multiple lines. -->
        <attr name="android:ellipsize" />
        <!-- The drawable to be drawn above the text. -->
        <attr name="android:drawableTop" />
        <!-- The drawable to be drawn below the text. -->
        <attr name="android:drawableBottom" />
        <!-- The drawable to be drawn to the left of the text. -->
        <attr name="android:drawableLeft" />
        <!-- The drawable to be drawn to the right of the text. -->
        <attr name="android:drawableRight" />
        <!-- The drawable to be drawn to the start of the text. -->
        <attr name="android:drawableStart" />
        <!-- The drawable to be drawn to the end of the text. -->
        <attr name="android:drawableEnd" />
        <!-- The padding between the drawables and the text. -->
        <attr name="android:drawablePadding" />
        <!-- Tint to apply to the compound (left, top, etc.) drawables. -->
        <attr name="android:drawableTint" />
        <!-- Blending mode used to apply the compound (left, top, etc.) drawables tint. -->
        <attr name="android:drawableTintMode" />
        <!-- Extra spacing between lines of text. The value will not be applied for the last
             line of text. -->
        <attr name="android:lineSpacingExtra" />
        <!-- Extra spacing between lines of text, as a multiplier. The value will not be applied
             for the last line of text.-->
        <attr name="android:lineSpacingMultiplier" />
        <!-- Explicit height between lines of text. If set, this will override the values set
             for lineSpacingExtra and lineSpacingMultiplier. -->
        <attr name="android:lineHeight" />
        <!-- Distance from the top of the TextView to the first text baseline. If set, this
             overrides the value set for paddingTop. -->
        <attr name="android:firstBaselineToTopHeight" />
        <!-- Distance from the bottom of the TextView to the last text baseline. If set, this
             overrides the value set for paddingBottom. -->
        <attr name="android:lastBaselineToBottomHeight" />
        <!-- The number of times to repeat the marquee animation. Only applied if the
             TextView has marquee enabled. -->
        <attr name="android:marqueeRepeatLimit" />
        <attr name="android:inputType" />
        <!-- Whether undo should be allowed for editable text. Defaults to true. -->
        <attr name="android:allowUndo" />
        <attr name="android:imeOptions" />
        <!-- An addition content type description to supply to the input
             method attached to the text view, which is private to the
             implementation of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#privateImeOptions
             EditorInfo.privateImeOptions} field when the input
             method is connected. -->
        <attr name="android:privateImeOptions" />
        <!-- Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
             used when an input method is connected to the text view. -->
        <attr name="android:imeActionLabel" />
        <!-- Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
             used when an input method is connected to the text view. -->
        <attr name="android:imeActionId" />
        <!-- Reference to an
             {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
             XML resource containing additional data to
             supply to an input method, which is private to the implementation
             of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#extras
             EditorInfo.extras} field when the input
             method is connected. -->
        <attr name="android:editorExtras" />

        <!-- Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region. -->
        <attr name="android:textSelectHandleLeft" />
        <!-- Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region. -->
        <attr name="android:textSelectHandleRight" />
        <!-- Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text. -->
        <attr name="android:textSelectHandle" />
        <!-- The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field. -->
        <attr name="android:textEditPasteWindowLayout" />
        <!-- Variation of textEditPasteWindowLayout displayed when the clipboard is empty. -->
        <attr name="android:textEditNoPasteWindowLayout" />
        <!-- Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top. -->
        <attr name="android:textEditSidePasteWindowLayout" />
        <!-- Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty. -->
        <attr name="android:textEditSideNoPasteWindowLayout" />

        <!-- Layout of the TextView item that will populate the suggestion popup window. -->
        <attr name="android:textEditSuggestionItemLayout" />
        <!-- (EW) android:textEditSuggestionContainerLayout is private, so use our copy instead-->
        <!-- Layout of the container of the suggestion popup window. -->
        <attr name="textEditSuggestionContainerLayout" />
        <!-- (EW) android:textEditSuggestionHighlightStyle is private, so use our copy instead-->
        <!-- Style of the highlighted string in the suggestion popup window. -->
        <attr name="textEditSuggestionHighlightStyle" />


        <!-- Reference to a drawable that will be drawn under the insertion cursor. -->
        <attr name="android:textCursorDrawable" />

        <!-- Indicates that the content of a non-editable text can be selected. -->
        <attr name="android:textIsSelectable" />
        <!-- Present the text in ALL CAPS. This may use a small-caps form when available. -->
        <attr name="android:textAllCaps" />
        <!-- Elegant text height, especially for less compacted complex script text. -->
        <attr name="android:elegantTextHeight" />
        <!-- Whether to respect the ascent and descent of the fallback fonts that are used in
             displaying the text. When true, fallback fonts that end up getting used can increase
             the ascent and descent of the lines that they are used on. -->
        <attr name="android:fallbackLineSpacing" />
        <!-- Text letter-spacing. -->
        <attr name="android:letterSpacing" />
        <!-- Font feature settings. -->
        <attr name="android:fontFeatureSettings" />
        <!-- Font variation settings. -->
        <attr name="android:fontVariationSettings" />
        <!-- Break strategy (control over paragraph layout). -->
        <attr name="android:breakStrategy" />
        <!-- Frequency of automatic hyphenation. -->
        <attr name="android:hyphenationFrequency" />
        <!-- Specify the type of auto-size. Note that this feature is not supported by EditText,
             works only for TextView. -->
        <attr name="android:autoSizeTextType" />
        <!-- Specify the auto-size step size if <code>autoSizeTextType</code> is set to
             <code>uniform</code>. The default is 1px. Overwrites
             <code>autoSizePresetSizes</code> if set. -->
        <attr name="android:autoSizeStepGranularity" />
        <!-- Resource array of dimensions to be used in conjunction with
             <code>autoSizeTextType</code> set to <code>uniform</code>. Overrides
             <code>autoSizeStepGranularity</code> if set. -->
        <attr name="android:autoSizePresetSizes"/>
        <!-- The minimum text size constraint to be used when auto-sizing text. -->
        <attr name="android:autoSizeMinTextSize" />
        <!-- The maximum text size constraint to be used when auto-sizing text. -->
        <attr name="android:autoSizeMaxTextSize" />
        <!-- Mode for justification. -->
        <attr name="android:justificationMode" />
    </declare-styleable>
    <declare-styleable name="TextViewAppearance">
        <!-- Base text color, typeface, size, and style. -->
        <attr name="android:textAppearance" />
    </declare-styleable>
    <declare-styleable name="TextViewMultiLineBackgroundState">
        <!-- State identifier indicating a TextView has a multi-line layout. -->
        <attr name="android:state_multiline" />
    </declare-styleable>
    <!-- Attributes that can be used with {@link android.view.View} or
         any of its subclasses.  Also see {@link #ViewGroup_Layout} for
         attributes that are processed by the view's parent. -->
    <declare-styleable name="View">
        <!-- Supply an identifier name for this view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.
             This must be a
             resource reference; typically you set this using the
             <code>@+</code> syntax to create a new ID resources.
             For example: <code>android:id="@+id/my_id"</code> which
             allows you to later retrieve the view
             with <code>findViewById(R.id.my_id)</code>. -->
        <attr name="android:id" />

        <!-- Supply a tag for this view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.  It is generally preferable to use
             IDs (through the android:id attribute) instead of tags because
             they are faster and allow for compile-time type checking. -->
        <attr name="android:tag" />

        <!-- The initial horizontal scroll offset, in pixels.-->
        <attr name="android:scrollX" />

        <!-- The initial vertical scroll offset, in pixels. -->
        <attr name="android:scrollY" />

        <!-- A drawable to use as the background.  This can be either a reference
             to a full drawable resource (such as a PNG image, 9-patch,
             XML state list description, etc), or a solid color such as "#ff000000"
            (black). -->
        <attr name="android:background" />

        <!-- Sets the padding, in pixels, of all four edges. Padding is defined as
             space between the edges of the view and the view's content. This value will take
             precedence over any of the edge-specific values (paddingLeft, paddingTop,
             paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
             not override paddingStart or paddingEnd, if set. A view's size
             will include its padding. If a {@link android.R.attr#background}
             is provided, the padding will initially be set to that (0 if the
             drawable does not have padding). Explicitly setting a padding value
             will override the corresponding padding found in the background. -->
        <attr name="android:padding" />
        <!-- Sets the padding, in pixels, of the left and right edges; see
             {@link android.R.attr#padding}. This value will take precedence over
             paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set). -->
        <attr name="android:paddingHorizontal" />
        <!-- Sets the padding, in pixels, of the top and bottom edges; see
             {@link android.R.attr#padding}. This value will take precedence over
             paddingTop and paddingBottom, if set. -->
        <attr name="android:paddingVertical" />
        <!-- Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}. -->
        <attr name="android:paddingLeft" />
        <!-- Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}. -->
        <attr name="android:paddingTop" />
        <!-- Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}. -->
        <attr name="android:paddingRight" />
        <!-- Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}. -->
        <attr name="android:paddingBottom" />
        <!-- Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. -->
        <attr name="android:paddingStart" />
        <!-- Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}. -->
        <attr name="android:paddingEnd" />

        <!-- Controls whether a view can take focus.  By default, this is "auto" which lets the
             framework determine whether a user can move focus to a view.  By setting this attribute
             to true the view is allowed to take focus. By setting it to "false" the view will not
             take focus. This value does not impact the behavior of
             directly calling {@link android.view.View#requestFocus}, which will
             always request focus regardless of this view.  It only impacts where
             focus navigation will try to move focus. -->
        <attr name="android:focusable" />

        <!-- Describes the content of a view so that a autofill service can fill in the appropriate
             data. Multiple hints can be combined in a comma separated list or an array of strings
             to mean e.g. emailAddress or postalAddress. -->
        <attr name="android:autofillHints" />

        <!-- Hints the Android System whether the view node associated with this View should be
             included in a view structure used for autofill purposes. -->
        <attr name="android:importantForAutofill" />

        <!-- Boolean that controls whether a view can take focus while in touch mode.
             If this is true for a view, that view can gain focus when clicked on, and can keep
             focus if another view is clicked on that doesn't have this attribute set to true. -->
        <attr name="android:focusableInTouchMode" />

        <!-- Controls the initial visibility of the view.  -->
        <attr name="android:visibility" />

        <!-- Boolean internal attribute to adjust view layout based on
             system windows such as the status bar.
             If true, adjusts the padding of this view to leave space for the system windows.
             Will only take effect if this view is in a non-embedded activity. -->
        <attr name="android:fitsSystemWindows" />

        <!-- Defines which scrollbars should be displayed on scrolling or not. -->
        <attr name="android:scrollbars" />

        <!-- Controls the scrollbar style and position. The scrollbars can be overlaid or
             inset. When inset, they add to the padding of the view. And the
             scrollbars can be drawn inside the padding area or on the edge of
             the view. For example, if a view has a background drawable and you
             want to draw the scrollbars inside the padding specified by the
             drawable, you can use insideOverlay or insideInset. If you want them
             to appear at the edge of the view, ignoring the padding, then you can
             use outsideOverlay or outsideInset.-->
        <attr name="android:scrollbarStyle" />

        <!-- Set this if the view will serve as a scrolling container, meaning
             that it can be resized to shrink its overall window so that there
             will be space for an input method.  If not set, the default
             value will be true if "scrollbars" has the vertical scrollbar
             set, else it will be false. -->
        <attr name="android:isScrollContainer" />

        <!-- Defines whether to fade out scrollbars when they are not in use. -->
        <attr name="android:fadeScrollbars" />
        <!-- Defines the delay in milliseconds that a scrollbar takes to fade out. -->
        <attr name="android:scrollbarFadeDuration" />
        <!-- Defines the delay in milliseconds that a scrollbar waits before fade out. -->
        <attr name="android:scrollbarDefaultDelayBeforeFade" />
        <!-- Sets the width of vertical scrollbars and height of horizontal scrollbars. -->
        <attr name="android:scrollbarSize" />
        <!-- Defines the horizontal scrollbar thumb drawable. -->
        <attr name="android:scrollbarThumbHorizontal" />
        <!-- Defines the vertical scrollbar thumb drawable. -->
        <attr name="android:scrollbarThumbVertical" />
        <!-- Defines the horizontal scrollbar track drawable. -->
        <attr name="android:scrollbarTrackHorizontal" />
        <!-- Defines the vertical scrollbar track drawable. -->
        <attr name="android:scrollbarTrackVertical" />
        <!-- Defines whether the horizontal scrollbar track should always be drawn. -->
        <attr name="android:scrollbarAlwaysDrawHorizontalTrack" />
        <!-- Defines whether the vertical scrollbar track should always be drawn. -->
        <attr name="android:scrollbarAlwaysDrawVerticalTrack" />

        <!-- This attribute is ignored in API level 14
             ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.
             Using fading edges may introduce noticeable performance
             degradations and should be used only when required by the application's
             visual design. To request fading edges with API level 14 and above,
             use the <code>android:requiresFadingEdge</code> attribute instead. -->
        <attr name="android:fadingEdge" />
        <!-- Defines which edges should be faded on scrolling. -->
        <attr name="android:requiresFadingEdge" />
        <!-- Defines the length of the fading edges. -->
        <attr name="android:fadingEdgeLength" />

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_LEFT}.

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr name="android:nextFocusLeft" />

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_RIGHT}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr name="android:nextFocusRight" />

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_UP}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr name="android:nextFocusUp" />

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_DOWN}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr name="android:nextFocusDown" />

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_FORWARD}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr name="android:nextFocusForward" />

        <!-- Defines whether this view reacts to click events. -->
        <attr name="android:clickable" />

        <!-- Defines whether this view reacts to long click events. -->
        <attr name="android:longClickable" />

        <!--  Defines whether this view reacts to context click events. -->
        <attr name="android:contextClickable" />

        <!-- If false, no state will be saved for this view when it is being
             frozen. The default is true, allowing the view to be saved
             (however it also must have an ID assigned to it for its
             state to be saved).  Setting this to false only disables the
             state for this view, not for its children which may still
             be saved. -->
        <attr name="android:saveEnabled" />

        <!-- Specifies whether to filter touches when the view's window is obscured by
             another visible window.  When set to true, the view will not receive touches
             whenever a toast, dialog or other window appears above the view's window.
             Refer to the {@link android.view.View} security documentation for more details. -->
        <attr name="android:filterTouchesWhenObscured" />

        <!-- Defines the quality of translucent drawing caches. This property is used
             only when the drawing cache is enabled and translucent. The default value is auto.
             Deprecated: The view drawing cache was largely made obsolete with the introduction of
             hardware-accelerated rendering in API 11. -->
        <attr name="android:drawingCacheQuality" />

        <!-- Controls whether the view's window should keep the screen on
             while visible. -->
        <attr name="android:keepScreenOn" />

        <!-- When this attribute is set to true, the view gets its drawable state
             (focused, pressed, etc.) from its direct parent rather than from itself. -->
        <attr name="android:duplicateParentState" />

        <!-- Defines the minimum height of the view. It is not guaranteed
             the view will be able to achieve this minimum height (for example,
             if its parent layout constrains it with less available height). -->
        <attr name="android:minHeight" />

        <!-- Defines the minimum width of the view. It is not guaranteed
             the view will be able to achieve this minimum width (for example,
             if its parent layout constrains it with less available width). -->
        <attr name="android:minWidth" />

        <!-- Boolean that controls whether a view should have sound effects
             enabled for events such as clicking and touching. -->
        <attr name="android:soundEffectsEnabled" />

        <!-- Boolean that controls whether a view should have haptic feedback
             enabled for events such as long presses. -->
        <attr name="android:hapticFeedbackEnabled" />

        <!-- Defines text that briefly describes content of the view. This property is used
             primarily for accessibility. Since some views do not have textual
             representation this attribute can be used for providing such. -->
        <attr name="android:contentDescription" />

        <!-- Sets the id of a view before which this one is visited in accessibility traversal.
             A screen-reader must visit the content of this view before the content of the one
             it precedes.
             {@see android.view.View#setAccessibilityTraversalBefore(int)} -->
        <attr name="android:accessibilityTraversalBefore" />

        <!-- Sets the id of a view after which this one is visited in accessibility traversal.
             A screen-reader must visit the content of the other view before the content of
             this one.
             {@see android.view.View#setAccessibilityTraversalAfter(int)} -->
        <attr name="android:accessibilityTraversalAfter" />

        <!-- Name of the method in this View's context to invoke when the view is
             clicked. This name must correspond to a public method that takes
             exactly one parameter of type View. For instance, if you specify
             <code>android:onClick="sayHello"</code>, you must declare a
             <code>public void sayHello(View v)</code> method of your context
             (typically, your Activity). -->
        <attr name="android:onClick" />

        <!-- Defines over-scrolling behavior. This property is used only if the
             View is scrollable. Over-scrolling is the ability for the user to
             receive feedback when attempting to scroll beyond meaningful content. -->
        <attr name="android:overScrollMode" />

        <!-- alpha property of the view, as a value between 0 (completely transparent) and 1
             (completely opaque). -->
        <attr name="android:alpha" />

        <!-- base z depth of the view. -->
        <attr name="android:elevation" />

        <!-- translation in x of the view. This value is added post-layout to the left
             property of the view, which is set by its layout. -->
        <attr name="android:translationX" />

        <!-- translation in y of the view. This value is added post-layout to the top
             property of the view, which is set by its layout. -->
        <attr name="android:translationY" />

        <!-- translation in z of the view. This value is added to its elevation. -->
        <attr name="android:translationZ" />

        <!-- x location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotX property of the View. -->
        <attr name="android:transformPivotX" />

        <!-- y location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotY property of the View. -->
        <attr name="android:transformPivotY" />

        <!-- rotation of the view, in degrees. -->
        <attr name="android:rotation" />

        <!-- rotation of the view around the x axis, in degrees. -->
        <attr name="android:rotationX" />

        <!-- rotation of the view around the y axis, in degrees. -->
        <attr name="android:rotationY" />

        <!-- scale of the view in the x direction. -->
        <attr name="android:scaleX" />

        <!-- scale of the view in the y direction. -->
        <attr name="android:scaleY" />

        <!-- Determines which side the vertical scroll bar should be placed on. -->
        <attr name="android:verticalScrollbarPosition" />

        <!-- Specifies the type of layer backing this view. The default value is none.
             Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
             for more information.-->
        <attr name="android:layerType" />

        <!-- Defines the direction of layout drawing. This typically is associated with writing
             direction of the language script used. The possible values are "ltr" for Left-to-Right,
             "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
             to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
             used in "en-US". The default for this attribute is "inherit". -->
        <attr name="android:layoutDirection" />

        <!-- Defines the direction of the text. -->
        <attr name="android:textDirection" />

        <!-- Defines the alignment of the text. -->
        <attr name="android:textAlignment" />

        <!-- Describes whether or not this view is important for accessibility.
             If it is important, the view fires accessibility events and is
             reported to accessibility services that query the screen. Note:
             While not recommended, an accessibility service may decide to
             ignore this attribute and operate on all views in the view tree. -->
        <attr name="android:importantForAccessibility" />

        <!-- Indicates to accessibility services whether the user should be notified when
             this view changes. -->
        <attr name="android:accessibilityLiveRegion" />

        <!-- Specifies the id of a view for which this view serves as a label for
             accessibility purposes. For example, a TextView before an EditText in
             the UI usually specifies what infomation is contained in the EditText.
             Hence, the TextView is a label for the EditText. -->
        <attr name="android:labelFor" />

        <!-- Specifies a theme override for a view. When a theme override is set, the
             view will be inflated using a {@link android.content.Context} themed with
             the specified resource. During XML inflation, any child views under the
             view with a theme override will inherit the themed context. -->
        <attr name="android:theme" />

        <!-- Names a View such that it can be identified for Transitions. Names should be
             unique in the View hierarchy. -->
        <attr name="android:transitionName" />

        <!-- Specifies that this view should permit nested scrolling within a compatible
             ancestor view. -->
        <attr name="android:nestedScrollingEnabled" />

        <!-- Sets the state-based animator for the View. -->
        <attr name="android:stateListAnimator" />

        <!-- Tint to apply to the background. -->
        <attr name="android:backgroundTint" />

        <!-- Blending mode used to apply the background tint. -->
        <attr name="android:backgroundTintMode" />

        <!-- ViewOutlineProvider used to determine the View's Outline. -->
        <attr name="android:outlineProvider" />

        <!-- Defines the drawable to draw over the content. This can be used as an overlay.
             The foreground drawable participates in the padding of the content if the gravity
             is set to fill. -->
        <attr name="android:foreground" />
        <!-- Defines the gravity to apply to the foreground drawable. The gravity defaults
             to fill. -->
        <attr name="android:foregroundGravity" />
<!--        &lt;!&ndash; Defines whether the foreground drawable should be drawn inside the padding.-->
<!--             This property is turned on by default. &ndash;&gt;-->
<!--        <attr name="android:foregroundInsidePadding" />-->
        <!-- Tint to apply to the foreground. -->
        <attr name="android:foregroundTint" />
        <!-- Blending mode used to apply the foreground tint. -->
        <attr name="android:foregroundTintMode" />

        <!-- Defines which scroll indicators should be displayed when the view
             can be scrolled. Multiple values may be combined using logical OR,
             for example "top|bottom". -->
        <attr name="android:scrollIndicators" />

        <attr name="android:pointerIcon" />

        <!-- Whether this view has elements that may overlap when drawn. See
             {@link android.view.View#forceHasOverlappingRendering(boolean)}. -->
        <attr name="android:forceHasOverlappingRendering" />

        <!-- Defines text displayed in a small popup window on hover or long press. -->
        <attr name="android:tooltipText" />

        <!-- Whether this view is a root of a keyboard navigation cluster.
             See {@link android.view.View#setKeyboardNavigationCluster(boolean)}. -->
        <attr name="android:keyboardNavigationCluster" />

        <!-- Defines the next keyboard navigation cluster.

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr name="android:nextClusterForward" />

        <!-- Whether this view is a default-focus view.
             Only one view per keyboard navigation cluster can have this attribute set to true.
             See {@link android.view.View#setFocusedByDefault(boolean)}. -->
        <attr name="android:focusedByDefault" />

        <!-- Whether this View should use a default focus highlight when it gets focused but
             doesn't have {@link android.R.attr#state_focused} defined in its background. -->
        <attr name="android:defaultFocusHighlightEnabled" />

        <!-- Whether this view should be treated as a focusable unit by screen reader accessibility
             tools. See {@link android.view.View#setScreenReaderFocusable(boolean)}. The default
             value, {@code false}, leaves the screen reader to consider other signals, such as
             focusability or the presence of text, to decide what it focus.-->
        <attr name="android:screenReaderFocusable" />

        <!-- The title this view should present to accessibility as a pane title.
             See {@link android.view.View#setAccessibilityPaneTitle(CharSequence)} -->
        <attr name="android:accessibilityPaneTitle" />

        <!-- Whether or not this view is a heading for accessibility purposes. -->
        <attr name="android:accessibilityHeading" />

        <!-- Sets the color of the spot shadow that is drawn when the view has a positive Z or
             elevation value.
             <p>
             By default the shadow color is black. Generally, this color will be opaque so the
             intensity of the shadow is consistent between different views with different colors.
             <p>
             The opacity of the final spot shadow is a function of the shadow caster height, the
             alpha channel of the outlineSpotShadowColor (typically opaque), and the
             {@link android.R.attr#spotShadowAlpha} theme attribute. -->
        <attr name="android:outlineSpotShadowColor" />

        <!-- Sets the color of the ambient shadow that is drawn when the view has a positive Z
             or elevation value.
             <p>
             By default the shadow color is black. Generally, this color will be opaque so the
             intensity of the shadow is consistent between different views with different colors.
             <p>
             The opacity of the final ambient shadow is a function of the shadow caster height,
             the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
             {@link android.R.attr#ambientShadowAlpha} theme attribute. -->
        <attr name="android:outlineAmbientShadowColor" />
    </declare-styleable>
</resources>